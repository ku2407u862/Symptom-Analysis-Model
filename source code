import streamlit as st
st.set_page_config(page_title="Disease Predictor (Flexible Symptoms)")

import pandas as pd
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.base import BaseEstimator, TransformerMixin

# ‚úÖ Fixed regex warning by escaping the backslashes
class TextCleaner(BaseEstimator, TransformerMixin):
    def fit(self, X, y=None):
        return self

    def transform(self, X):
        return [re.sub("[^\\w\\s]", "", text.lower().strip()) for text in X]

# Combine multiple symptoms into one string
def combine_symptoms(df):
    df['symptoms'] = df[['symptom1', 'symptom2', 'symptom3']].fillna('').astype(str).agg(', '.join, axis=1)
    return df[['symptoms', 'disease']]

# Clean and format user input
def preprocess_input(symptoms_list):
    combined = ', '.join(symptoms_list)
    cleaned = re.sub("[^\\w\\s,]", "", combined.lower()).strip()
    cleaned = re.sub(r"\s+", " ", cleaned)
    return cleaned

# Load and prepare data
@st.cache_data
def load_data():
    try:
        df = pd.read_csv("text.csv")
        df.columns = df.columns.str.strip().str.lower()
        for col in ['symptom1', 'symptom2', 'symptom3', 'disease']:
            if col not in df.columns:
                st.error(f"Missing column: {col}")
                st.stop()
        df = combine_symptoms(df)
        df['symptoms'] = df['symptoms'].fillna('').astype(str)
        df['disease'] = df['disease'].fillna('').astype(str)
        return df
    except Exception as e:
        st.error(f"Error loading CSV: {e}")
        st.stop()

# Train the model
@st.cache_resource
def train_model(df):
    pipeline = make_pipeline(
        TextCleaner(),
        TfidfVectorizer(stop_words='english', ngram_range=(1, 2), max_features=1000),
        MultinomialNB()
    )
    pipeline.fit(df['symptoms'], df['disease'])
    return pipeline

# Streamlit UI
st.title("ü©∫ Disease Predictor")
st.markdown("Enter 1 to 3 symptoms (comma separated). Example: fever, headache, sore throat")

# User input
user_symptoms = st.text_input("Your symptoms:")

# Load & train
df = load_data()
model = train_model(df)

# Predict
if st.button("Predict"):
    if user_symptoms.strip() == "":
        st.warning("‚ö†Ô∏è Please enter at least one symptom.")
    else:
        symptoms_list = [s.strip() for s in user_symptoms.split(",") if s.strip()]
        cleaned_input = preprocess_input(symptoms_list)
        prediction = model.predict([cleaned_input])[0]
        st.success(f"üßæ Predicted Disease: {prediction}")
